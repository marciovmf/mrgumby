

<ArgList>               -> [ <Expression> ( "," <Expression> )* ]
<Factor>                -> ( int_literal | float_literal | string_literal | <lvalue> | <FunctionCall> | "(" <Expression> ")" )
<UnaryExpression>       -> [ ( "+" | "-" )] <Factor>
<Term>                  -> <UnaryExpression> ( ( "*" | "/" | "%" ) <UnaryExpression> )*
<NumExpression>         -> <Term> ( ( "+" | "-" ) <Term> )*
<lvalue>                -> identifier
<AssignmentStatement>   -> <lvalue> "=" <Expression>
<ifStatement>           -> "if" "(" <Expression> ")" <Statement> [ "else" <Statement> ]
<ForStatement>          -> "for" "(" [<AssignmentStatement>] ";" [<expression>] ";" [<AssignmentStatement>] ")" <Statement> 
<StatementList>         -> <Statement> [ <StatementList> ]
<ReturnStatement>       -> "return" [ <Expression> ]
<FunctionBody>          -> "(" <ParamList> ")" <Statement>
<FunctionDeclStatement> -> "function" identifier "(" [ identifier ( "," identifier )* ] ")" <FunctionBody>
<Expression>            -> <NumExpression> [ ( "<" | ">" | "<=" | ">=" | "==" | "!=" ) <NumExpression> ]
<FunctionCall>          -> identifier "(" <ArgList> ")"
<Statement>             -> (
                              <PrintStatement>
                              | <FunctionCall> ";"
                              | <InputStatement> ";"
                              | <ReturnStatement> ";"
                              | <AssignmentStatement> ";"
                              | <BreakStatement> ";"
                              | <FunctionDeclStatement>
                              | <IfStatement>
                              | <ForStatement>
                              | <WhileStatement>
                              | "{" <StatementList> "}"
                           )

<Program> -> ( <StatementList> )*

